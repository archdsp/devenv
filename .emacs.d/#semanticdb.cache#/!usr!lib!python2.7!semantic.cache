;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1157])
            ("errno" include nil nil [1163 1180])
            ("sys" include nil nil [1163 1180])
            ("_names" variable nil nil [1182 1215])
            ("__all__" variable nil nil [1265 1440])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1464 1470]))              ) nil [1442 1600])
            ("if" code nil nil [1601 3131])
            ("sys" variable nil nil [3132 3161])
            ("" code nil nil [3182 3250])
            ("del" code nil nil [3252 3262])
            ("SEEK_SET" variable nil nil [3384 3396])
            ("SEEK_CUR" variable nil nil [3397 3409])
            ("SEEK_END" variable nil nil [3410 3422])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3532 3536])
                    ("mode" variable nil (reparse-symbol function_parameters) [3538 3542]))                  )
                nil [3519 4271])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4287 4291]))                  )
                nil [4272 4978])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4991 4994])
                    ("new" variable nil (reparse-symbol function_parameters) [4996 4999]))                  )
                nil [4979 5846])
            ("__all__" code nil nil [5847 5900])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune the
    search, or to impose a specific order of visiting.  Modifying dirnames when
    topdown is false is ineffective, since the directories in dirnames have
    already been generated by the time dirnames itself is generated. No matter
    the value of topdown, the list of subdirectories is retrieved before the
    tuples for the directory and its subdirectories are generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories

    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5911 5914])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5916 5923])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5930 5937])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5944 5955]))                  )
                nil [5902 9834])
            ("__all__" code nil nil [9835 9857])
            ("try" code nil nil [9899 9951])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9962 9966])
                    ("args" variable nil (reparse-symbol function_parameters) [9968 9973]))                  )
                nil [9952 10121])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10133 10137])
                    ("args" variable nil (reparse-symbol function_parameters) [10139 10144]))                  )
                nil [10122 10348])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10360 10364])
                    ("args" variable nil (reparse-symbol function_parameters) [10366 10371]))                  )
                nil [10349 10557])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10570 10574])
                    ("args" variable nil (reparse-symbol function_parameters) [10576 10581]))                  )
                nil [10558 10827])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10839 10843])
                    ("args" variable nil (reparse-symbol function_parameters) [10845 10849]))                  )
                nil [10828 11080])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [11093 11097])
                    ("args" variable nil (reparse-symbol function_parameters) [11099 11103])
                    ("env" variable nil (reparse-symbol function_parameters) [11105 11108]))                  )
                nil [11081 11375])
            ("__all__" code nil nil [11376 11448])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11463 11467])
                ("args" variable nil (reparse-symbol function_parameters) [11469 11473])
                ("env" variable nil (reparse-symbol function_parameters) [11475 11478]))              ) nil [11450 12318])
            ("try" code nil nil [12380 16589])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16601 16604])
                    ("default" variable nil (reparse-symbol function_parameters) [16606 16613]))                  )
                nil [16590 16797])
            ("__all__" code nil nil [16797 16821])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16835 16839]))              ) nil [16823 16871])
            ("if" code nil nil [16915 19818])
            ("if" code nil nil [19819 20816])
            ("if" code nil nil [20818 21924])
            ("if" code nil nil [21958 25224])
            ("copy_reg" include nil nil [25225 25253])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25277 25280])
                ("dict" variable nil (reparse-symbol function_parameters) [25282 25286]))              ) nil [25255 25323])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25348 25350]))              ) nil [25324 25425])
            ("try" code nil nil [25426 25560])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25586 25589])
                ("dict" variable nil (reparse-symbol function_parameters) [25591 25595]))              ) nil [25561 25635])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25663 25665]))              ) nil [25636 25743])
            ("try" code nil nil [25744 25911]))          
      :file "os.py"
      :pointmax 25911
      :fsize 25910
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4520])
            ("_extension_registry" variable nil nil [5002 5026])
            ("_inverted_registry" variable nil nil [5056 5079])
            ("_extension_cache" variable nil nil [5110 5131])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5306 5312])
                    ("name" variable nil (reparse-symbol function_parameters) [5314 5318])
                    ("code" variable nil (reparse-symbol function_parameters) [5320 5324]))                  )
                nil [5288 6035])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [6057 6063])
                    ("name" variable nil (reparse-symbol function_parameters) [6065 6069])
                    ("code" variable nil (reparse-symbol function_parameters) [6071 6075]))                  )
                nil [6036 6495])
            ("clear_extension_cache" function nil nil [6496 6554]))          
      :file "copy_reg.py"
      :pointmax 6975
      :fsize 6974
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997])
            ("__all__" variable nil nil [2042 2094]))          
      :file "types.py"
      :pointmax 2095
      :fsize 2094
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("hashlib" include nil nil [1490 1516])
            ("__all__" variable nil nil [1518 1902])
            ("NV_MAGICCONST" code nil nil [1904 1945])
            ("TWOPI" code nil nil [1946 1961])
            ("LOG4" variable nil nil [1962 1978])
            ("SG_MAGICCONST" code nil nil [1979 2010])
            ("BPF" variable nil nil [2011 2019])
            ("RECIP_BPF" variable nil nil [2055 2074])
            ("_random" include nil nil [2257 2271])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3037 3048])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3122 3229])
                            ("self" code nil (reparse-symbol indented_block_body) [3239 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3099 3103])
                            ("x" variable nil (reparse-symbol function_parameters) [3105 3106]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3086 3283])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3297 3301])
                            ("a" variable nil (reparse-symbol function_parameters) [3303 3304]))                          
                        :documentation "Initialize internal state of the random number generator.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or is an int or long, hash(a) is used instead.
        Hash values for some types are nondeterministic when the
        PYTHONHASHSEED environment variable is enabled.
        ")
                        (reparse-symbol indented_block_body) [3288 4135])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4153 4157]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [4140 4309])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4327 4331])
                            ("state" variable nil (reparse-symbol function_parameters) [4333 4338]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4314 5376])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5395 5399])
                            ("n" variable nil (reparse-symbol function_parameters) [5401 5402]))                          
                        :documentation "Change the internal state to one that is likely far away
        from the current state.  This method will not be in Py3.x,
        so it is better to simply reseed.
        ")
                        (reparse-symbol indented_block_body) [5381 5942])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6166 6170]))                          )
                        (reparse-symbol indented_block_body) [6149 6217])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6239 6243])
                            ("state" variable nil (reparse-symbol function_parameters) [6245 6250]))                          )
                        (reparse-symbol indented_block_body) [6222 6296])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6316 6320]))                          )
                        (reparse-symbol indented_block_body) [6301 6374])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6455 6459])
                            ("start" variable nil (reparse-symbol function_parameters) [6461 6466])
                            ("stop" variable nil (reparse-symbol function_parameters) [6468 6472])
                            ("step" variable nil (reparse-symbol function_parameters) [6479 6483])
                            ("_int" variable nil (reparse-symbol function_parameters) [6487 6491])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [6497 6506]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.

        ")
                        (reparse-symbol indented_block_body) [6441 9028])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9045 9049])
                            ("a" variable nil (reparse-symbol function_parameters) [9051 9052])
                            ("b" variable nil (reparse-symbol function_parameters) [9054 9055]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [9033 9186])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9206 9210])
                            ("n" variable nil (reparse-symbol function_parameters) [9212 9213])
                            ("_log" variable nil (reparse-symbol function_parameters) [9215 9219])
                            ("_int" variable nil (reparse-symbol function_parameters) [9226 9230])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [9236 9245])
                            ("_Method" variable nil (reparse-symbol function_parameters) [9274 9281])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [9295 9309]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [9191 10348])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10427 10431])
                            ("seq" variable nil (reparse-symbol function_parameters) [10433 10436]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [10416 10591])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10608 10612])
                            ("x" variable nil (reparse-symbol function_parameters) [10614 10615])
                            ("random" variable nil (reparse-symbol function_parameters) [10617 10623]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.

        ")
                        (reparse-symbol indented_block_body) [10596 11132])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11148 11152])
                            ("population" variable nil (reparse-symbol function_parameters) [11154 11164])
                            ("k" variable nil (reparse-symbol function_parameters) [11166 11167]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [11137 13967])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14122 14126])
                            ("a" variable nil (reparse-symbol function_parameters) [14128 14129])
                            ("b" variable nil (reparse-symbol function_parameters) [14131 14132]))                          )
                        (reparse-symbol indented_block_body) [14110 14259])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14336 14340])
                            ("low" variable nil (reparse-symbol function_parameters) [14342 14345])
                            ("high" variable nil (reparse-symbol function_parameters) [14351 14355])
                            ("mode" variable nil (reparse-symbol function_parameters) [14361 14365]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14321 14924])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15013 15017])
                            ("mu" variable nil (reparse-symbol function_parameters) [15019 15021])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15023 15028]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14995 15688])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15781 15785])
                            ("mu" variable nil (reparse-symbol function_parameters) [15787 15789])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15791 15796]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15762 16116])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16208 16212])
                            ("lambd" variable nil (reparse-symbol function_parameters) [16214 16219]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [16192 16833])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16927 16931])
                            ("mu" variable nil (reparse-symbol function_parameters) [16933 16935])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16937 16942]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16907 18297])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18384 18388])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18390 18395])
                            ("beta" variable nil (reparse-symbol function_parameters) [18397 18401]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [18367 20591])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20679 20683])
                            ("mu" variable nil (reparse-symbol function_parameters) [20685 20687])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20689 20694]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20669 22005])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22501 22505])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22507 22512])
                            ("beta" variable nil (reparse-symbol function_parameters) [22514 22518]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [22485 22976])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23052 23056])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23058 23063]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [23034 23228])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23306 23310])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23312 23317])
                            ("beta" variable nil (reparse-symbol function_parameters) [23319 23323]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [23287 23575]))                  
                :type "class")
                nil [2273 23575])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23668 23679])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23726 23730])
                            ("a" variable nil (reparse-symbol function_parameters) [23732 23733]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23717 24741])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24757 24761]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24746 25813])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25831 25835]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25818 25967])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25985 25989])
                            ("state" variable nil (reparse-symbol function_parameters) [25991 25996]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25972 26378])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26397 26401])
                            ("n" variable nil (reparse-symbol function_parameters) [26403 26404]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [26383 27146])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27164 27168])
                            ("x" variable nil (reparse-symbol function_parameters) [27170 27171])
                            ("y" variable nil (reparse-symbol function_parameters) [27175 27176])
                            ("z" variable nil (reparse-symbol function_parameters) [27180 27181]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [27151 27950])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27966 27970])
                            ("a" variable nil (reparse-symbol function_parameters) [27972 27973]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27955 28654]))                  
                :type "class")
                nil [23635 28654])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29002 29006]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28991 29141])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29162 29166])
                            ("k" variable nil (reparse-symbol function_parameters) [29168 29169]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [29146 29621])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29636 29640])
                            ("args" variable nil (reparse-symbol function_parameters) [29642 29647])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29649 29655]))                          )
                        (reparse-symbol indented_block_body) [29626 29749])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29753 29777])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29803 29807])
                            ("args" variable nil (reparse-symbol function_parameters) [29809 29814])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29816 29822]))                          )
                        (reparse-symbol indented_block_body) [29783 29981])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29985 30022]))                  
                :type "class")
                nil [28726 30023])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [30103 30104])
                ("func" variable nil (reparse-symbol function_parameters) [30106 30110])
                ("args" variable nil (reparse-symbol function_parameters) [30112 30116]))              ) nil [30083 30637])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30649 30650]))              ) nil [30639 31437])
            ("_inst" variable nil nil [31769 31785])
            ("seed" variable nil nil [31786 31803])
            ("random" variable nil nil [31804 31825])
            ("uniform" variable nil nil [31826 31849])
            ("triangular" variable nil nil [31850 31879])
            ("randint" variable nil nil [31880 31903])
            ("choice" variable nil nil [31904 31925])
            ("randrange" variable nil nil [31926 31953])
            ("sample" variable nil nil [31954 31975])
            ("shuffle" variable nil nil [31976 31999])
            ("normalvariate" variable nil nil [32000 32035])
            ("lognormvariate" variable nil nil [32036 32073])
            ("expovariate" variable nil nil [32074 32105])
            ("vonmisesvariate" variable nil nil [32106 32145])
            ("gammavariate" variable nil nil [32146 32179])
            ("gauss" variable nil nil [32180 32199])
            ("betavariate" variable nil nil [32200 32231])
            ("paretovariate" variable nil nil [32232 32267])
            ("weibullvariate" variable nil nil [32268 32305])
            ("getstate" variable nil nil [32306 32331])
            ("setstate" variable nil nil [32332 32357])
            ("jumpahead" variable nil nil [32358 32385])
            ("getrandbits" variable nil nil [32386 32417])
            ("if" code nil nil [32419 32458]))          
      :file "random.py"
      :pointmax 32458
      :fsize 32457
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax '((NAME 14659 . 14660) (IF 14667 . 14669) (ELSE 14683 . 14687)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("'''This module implements specialized container datatypes providing
alternatives to Python's general purpose built-in containers, dict,
list, set, and tuple.

* namedtuple   factory function for creating tuple subclasses with named fields
* deque        list-like container with fast appends and pops on either end
* Counter      dict subclass for counting hashable objects
* OrderedDict  dict subclass that remembers the order entries were added
* defaultdict  dict subclass that calls a factory function to supply missing values

'''" code nil nil [1 536])
            ("__all__" variable nil nil [538 612])
            ("_abcoll" include nil nil [761 782])
            ("_abcoll" include nil nil [783 797])
            ("__all__" variable nil nil [798 824])
            ("_collections" include nil nil [826 869])
            ("operator" include nil nil [870 927])
            ("keyword" include nil nil [928 971])
            ("sys" include nil nil [972 990])
            ("heapq" include nil nil [991 1013])
            ("itertools" include nil nil [1014 1091])
            ("itertools" include nil nil [1092 1127])
            ("try" code nil nil [1129 1254])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [1464 1507])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [2110 2313])
                            ("if" code nil (reparse-symbol indented_block_body) [2322 2461])
                            ("self" variable nil (reparse-symbol indented_block_body) [2469 2483])
                            ("args" variable nil (reparse-symbol indented_block_body) [2492 2507])
                            ("if" code nil (reparse-symbol indented_block_body) [2516 2614])
                            ("try" code nil (reparse-symbol indented_block_body) [2622 2823])
                            ("self" code nil (reparse-symbol indented_block_body) [2831 2859]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [2086 2091])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2093 2099]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2073 2860])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2881 2885])
                            ("key" variable nil (reparse-symbol function_parameters) [2887 2890])
                            ("value" variable nil (reparse-symbol function_parameters) [2892 2897])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [2899 2911]))                          )
                        (reparse-symbol indented_block_body) [2865 3333])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3354 3358])
                            ("key" variable nil (reparse-symbol function_parameters) [3360 3363])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [3365 3377]))                          )
                        (reparse-symbol indented_block_body) [3338 3848])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3866 3870]))                          )
                        (reparse-symbol indented_block_body) [3853 4251])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4273 4277]))                          )
                        (reparse-symbol indented_block_body) [4256 4677])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4692 4696]))                          )
                        (reparse-symbol indented_block_body) [4682 4872])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4961 4965]))                          )
                        (reparse-symbol indented_block_body) [4952 5036])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5052 5056]))                          )
                        (reparse-symbol indented_block_body) [5041 5148])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5163 5167]))                          )
                        (reparse-symbol indented_block_body) [5153 5277])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5295 5299]))                          )
                        (reparse-symbol indented_block_body) [5282 5387])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5407 5411]))                          )
                        (reparse-symbol indented_block_body) [5392 5524])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5543 5547]))                          )
                        (reparse-symbol indented_block_body) [5529 5676])
                    ("update" variable nil (reparse-symbol indented_block_body) [5681 5711])
                    ("__update" variable nil (reparse-symbol indented_block_body) [5717 5734])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [5799 5818])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5832 5836])
                            ("key" variable nil (reparse-symbol function_parameters) [5838 5841])
                            ("default" variable nil (reparse-symbol function_parameters) [5843 5850]))                          )
                        (reparse-symbol indented_block_body) [5824 6254])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6274 6278])
                            ("key" variable nil (reparse-symbol function_parameters) [6280 6283])
                            ("default" variable nil (reparse-symbol function_parameters) [6285 6292]))                          )
                        (reparse-symbol indented_block_body) [6259 6483])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6500 6504])
                            ("last" variable nil (reparse-symbol function_parameters) [6506 6510]))                          )
                        (reparse-symbol indented_block_body) [6488 6872])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6890 6894])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [6896 6909]))                          )
                        (reparse-symbol indented_block_body) [6877 7318])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7338 7342]))                          )
                        (reparse-symbol indented_block_body) [7323 7668])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7682 7686]))                          )
                        (reparse-symbol indented_block_body) [7673 7769])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7804 7807])
                            ("iterable" variable nil (reparse-symbol function_parameters) [7809 7817])
                            ("value" variable nil (reparse-symbol function_parameters) [7819 7824]))                          )
                        (reparse-symbol indented_block_body) [7774 8074])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8090 8094])
                            ("other" variable nil (reparse-symbol function_parameters) [8096 8101]))                          )
                        (reparse-symbol indented_block_body) [8079 8426])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8442 8446])
                            ("other" variable nil (reparse-symbol function_parameters) [8448 8453]))                          )
                        (reparse-symbol indented_block_body) [8431 8523])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8618 8622]))                          )
                        (reparse-symbol indented_block_body) [8605 8730])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8750 8754]))                          )
                        (reparse-symbol indented_block_body) [8735 8860])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8879 8883]))                          )
                        (reparse-symbol indented_block_body) [8865 8994]))                  
                :type "class")
                nil [1435 8994])
            ("_class_template" variable nil nil [9174 10622])
            ("_repr_template" variable nil nil [10624 10652])
            ("_field_template" variable nil nil [10654 10767])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [10784 10792])
                    ("field_names" variable nil (reparse-symbol function_parameters) [10794 10805])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10807 10814])
                    ("rename" variable nil (reparse-symbol function_parameters) [10822 10828]))                  )
                nil [10769 14954])
            ("Counter" type
               (:superclasses ("dict")
                :members 
                  ( ("'''Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    '''" code nil (reparse-symbol indented_block_body) [15141 16842])
                    ("__init__" function
                       (:suite 
                          ( ("'''Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        '''" code nil (reparse-symbol indented_block_body) [17213 17740])
                            ("if" code nil (reparse-symbol indented_block_body) [17749 17884])
                            ("self" variable nil (reparse-symbol indented_block_body) [17892 17906])
                            ("args" variable nil (reparse-symbol indented_block_body) [17915 17930])
                            ("if" code nil (reparse-symbol indented_block_body) [17939 18037])
                            ("super" code nil (reparse-symbol indented_block_body) [18045 18076])
                            ("self" code nil (reparse-symbol indented_block_body) [18085 18111]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [17189 17194])
                            ("kwds" variable nil (reparse-symbol function_parameters) [17196 17202]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17176 18112])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18133 18137])
                            ("key" variable nil (reparse-symbol function_parameters) [18139 18142]))                          )
                        (reparse-symbol indented_block_body) [18117 18290])
                    ("most_common" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18311 18315])
                            ("n" variable nil (reparse-symbol function_parameters) [18317 18318]))                          )
                        (reparse-symbol indented_block_body) [18295 18804])
                    ("elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18822 18826]))                          )
                        (reparse-symbol indented_block_body) [18809 19627])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19707 19710])
                            ("iterable" variable nil (reparse-symbol function_parameters) [19712 19720])
                            ("v" variable nil (reparse-symbol function_parameters) [19722 19723]))                          )
                        (reparse-symbol indented_block_body) [19677 19986])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [20002 20007])
                        ("kwds" variable nil (reparse-symbol function_parameters) [20009 20015]))                      ) (reparse-symbol indented_block_body) [19991 21857])
                    ("subtract" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [21875 21880])
                        ("kwds" variable nil (reparse-symbol function_parameters) [21882 21888]))                      ) (reparse-symbol indented_block_body) [21862 23325])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23339 23343]))                          )
                        (reparse-symbol indented_block_body) [23330 23415])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23435 23439]))                          )
                        (reparse-symbol indented_block_body) [23420 23487])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23508 23512])
                            ("elem" variable nil (reparse-symbol function_parameters) [23514 23518]))                          )
                        (reparse-symbol indented_block_body) [23492 23679])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23697 23701]))                          )
                        (reparse-symbol indented_block_body) [23684 23907])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24264 24268])
                            ("other" variable nil (reparse-symbol function_parameters) [24270 24275]))                          )
                        (reparse-symbol indented_block_body) [24252 24825])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24842 24846])
                            ("other" variable nil (reparse-symbol function_parameters) [24848 24853]))                          )
                        (reparse-symbol indented_block_body) [24830 25432])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25448 25452])
                            ("other" variable nil (reparse-symbol function_parameters) [25454 25459]))                          )
                        (reparse-symbol indented_block_body) [25437 26106])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26123 26127])
                            ("other" variable nil (reparse-symbol function_parameters) [26129 26134]))                          )
                        (reparse-symbol indented_block_body) [26111 26630]))                  
                :type "class")
                nil [15116 26630])
            ("if" code nil nil [26632 27799]))          
      :file "collections.py"
      :pointmax 27799
      :fsize 27798
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax '((NAME 27257 . 27267) (PAREN_BLOCK 27267 . 27283) (NAME 26915 . 26925) (PAREN_BLOCK 26925 . 26941) (NAME 26482 . 26490) (IF 26499 . 26501) (ELSE 26522 . 26526) (NAME 25832 . 25840) (IF 25855 . 25857) (ELSE 25878 . 25882) (NAME 22905 . 22913) (IF 22924 . 22926) (ELSE 22932 . 22936) (NAME 21244 . 21252) (IF 21263 . 21265) (ELSE 21271 . 21275) (INDENT_BLOCK 14392 . 14456) (NEWLINE 14391 . 14392) (COLON 14390 . 14391) (TRY 14315 . 14318) (AS 14386 . 14388)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
      :file "__future__.py"
      :pointmax 4381
      :fsize 4380
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 372])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [388 395])
                    ("category" variable nil (reparse-symbol function_parameters) [397 405])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [412 422]))                  )
                nil [375 714])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [733 740])
                    ("category" variable nil (reparse-symbol function_parameters) [742 750])
                    ("filename" variable nil (reparse-symbol function_parameters) [752 760])
                    ("lineno" variable nil (reparse-symbol function_parameters) [762 768])
                    ("file" variable nil (reparse-symbol function_parameters) [770 774])
                    ("line" variable nil (reparse-symbol function_parameters) [781 785]))                  )
                nil [715 1204])
            ("showwarning" variable nil nil [1291 1318])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1338 1345])
                    ("category" variable nil (reparse-symbol function_parameters) [1347 1355])
                    ("filename" variable nil (reparse-symbol function_parameters) [1357 1365])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1367 1373])
                    ("line" variable nil (reparse-symbol function_parameters) [1375 1379]))                  )
                nil [1320 2223])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2243 2249])
                    ("message" variable nil (reparse-symbol function_parameters) [2251 2258])
                    ("category" variable nil (reparse-symbol function_parameters) [2263 2271])
                    ("module" variable nil (reparse-symbol function_parameters) [2281 2287])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2292 2298])
                    ("append" variable nil (reparse-symbol function_parameters) [2321 2327]))                  )
                nil [2224 3571])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [3589 3595])
                    ("category" variable nil (reparse-symbol function_parameters) [3597 3605])
                    ("lineno" variable nil (reparse-symbol function_parameters) [3615 3621])
                    ("append" variable nil (reparse-symbol function_parameters) [3625 3631]))                  )
                nil [3572 4439])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [4440 4557])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [4648 4652]))                  
                :type "class")
                nil [4558 4653])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4732 4736]))              ) nil [4712 4901])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [4948 4951]))              ) nil [4933 5759])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [5801 5807]))              ) nil [5786 6086])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [6130 6138]))              ) nil [6113 6946])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6996 7003])
                    ("category" variable nil (reparse-symbol function_parameters) [7005 7013])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [7020 7030]))                  )
                nil [6987 8326])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [8345 8352])
                ("category" variable nil (reparse-symbol function_parameters) [8354 8362])
                ("filename" variable nil (reparse-symbol function_parameters) [8364 8372])
                ("lineno" variable nil (reparse-symbol function_parameters) [8374 8380])
                ("module" variable nil (reparse-symbol function_parameters) [8400 8406])
                ("registry" variable nil (reparse-symbol function_parameters) [8413 8421])
                ("module_globals" variable nil (reparse-symbol function_parameters) [8428 8442]))              ) nil [8327 10337])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [10434 10538])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10651 10673])
                            ("self" variable nil (reparse-symbol indented_block_body) [10682 10706])
                            ("self" variable nil (reparse-symbol indented_block_body) [10715 10739])
                            ("self" variable nil (reparse-symbol indented_block_body) [10748 10768])
                            ("self" variable nil (reparse-symbol indented_block_body) [10777 10793])
                            ("self" variable nil (reparse-symbol indented_block_body) [10802 10818])
                            ("None" code nil (reparse-symbol indented_block_body) [10884 10888]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10557 10561])
                            ("message" variable nil (reparse-symbol function_parameters) [10563 10570])
                            ("category" variable nil (reparse-symbol function_parameters) [10572 10580])
                            ("filename" variable nil (reparse-symbol function_parameters) [10582 10590])
                            ("lineno" variable nil (reparse-symbol function_parameters) [10592 10598])
                            ("file" variable nil (reparse-symbol function_parameters) [10600 10604])
                            ("line" variable nil (reparse-symbol function_parameters) [10631 10635]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10544 10889])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10906 10910]))                          )
                        (reparse-symbol indented_block_body) [10894 11137]))                  
                :type "class")
                nil [10339 11137])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11896 12136])
                            ("self" variable nil (reparse-symbol indented_block_body) [12145 12166])
                            ("module" code nil (reparse-symbol indented_block_body) [12237 12243])
                            ("self" variable nil (reparse-symbol indented_block_body) [12252 12273]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11854 11858])
                            ("record" variable nil (reparse-symbol function_parameters) [11860 11866])
                            ("module" variable nil (reparse-symbol function_parameters) [11874 11880]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11841 12274])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12292 12296]))                          )
                        (reparse-symbol indented_block_body) [12279 12574])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12593 12597]))                          )
                        (reparse-symbol indented_block_body) [12579 13128])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13146 13150])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [13152 13161]))                          )
                        (reparse-symbol indented_block_body) [13133 13371]))                  
                :type "class")
                nil [11139 13371])
            ("_warnings_defaults" variable nil nil [13823 13849])
            ("try" code nil nil [13850 14158])
            ("_processoptions" code nil nil [14184 14216])
            ("if" code nil nil [14217 14801])
            ("del" code nil nil [14801 14823]))          
      :file "warnings.py"
      :pointmax 14824
      :fsize 14823
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax '((NAME 12175 . 12179) (IF 12214 . 12216) (ELSE 12232 . 12236) (NAME 10827 . 10831) (IF 10867 . 10869) (ELSE 10879 . 10883) (NAME 1681 . 1685) (IF 1724 . 1726) (ELSE 1740 . 1744)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__doc__" variable nil nil [122 2181])
            ("__always_supported" variable nil nil [2293 2369])
            ("algorithms_guaranteed" variable nil nil [2371 2418])
            ("algorithms_available" variable nil nil [2419 2465])
            ("algorithms" variable nil nil [2467 2498])
            ("__all__" code nil nil [2500 2680])
            ("__get_builtin_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2713 2717]))              ) nil [2683 3549])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3581 3585]))              ) nil [3551 3958])
            ("__py_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3973 3977])
                    ("string" variable nil (reparse-symbol function_parameters) [3979 3985]))                  )
                nil [3960 4177])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4194 4198])
                    ("string" variable nil (reparse-symbol function_parameters) [4200 4206]))                  )
                nil [4179 4739])
            ("try" code nil nil [4741 5007])
            ("for" code nil nil [5008 5335])
            ("try" code nil nil [5337 7723])
            ("del" code nil nil [7743 7790])
            ("del" code nil nil [7791 7842]))          
      :file "hashlib.py"
      :pointmax 7843
      :fsize 7842
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 2022])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2040 2044]))                          )
                        (reparse-symbol indented_block_body) [2027 2067])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2110 2113])
                            ("C" variable nil (reparse-symbol function_parameters) [2115 2116]))                          )
                        (reparse-symbol indented_block_body) [2072 2269]))                  
                :type "class")
                nil [1841 2269])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2288 2311])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2349 2353]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2317 2373])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2416 2419])
                            ("C" variable nil (reparse-symbol function_parameters) [2421 2422]))                          )
                        (reparse-symbol indented_block_body) [2378 2547]))                  
                :type "class")
                nil [2271 2547])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2570 2593])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2636 2640])
                            ("x" variable nil (reparse-symbol function_parameters) [2642 2643]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2599 2667])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2710 2713])
                            ("C" variable nil (reparse-symbol function_parameters) [2715 2716]))                          )
                        (reparse-symbol indented_block_body) [2672 2850]))                  
                :type "class")
                nil [2549 2850])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2872 2895])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2934 2938])
                            ("args" variable nil (reparse-symbol function_parameters) [2940 2945])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2947 2953]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2901 2977])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3020 3023])
                            ("C" variable nil (reparse-symbol function_parameters) [3025 3026]))                          )
                        (reparse-symbol indented_block_body) [2982 3155]))                  
                :type "class")
                nil [2852 3155])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3584 3588])
                            ("other" variable nil (reparse-symbol function_parameters) [3590 3595]))                          )
                        (reparse-symbol indented_block_body) [3573 3840])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3856 3860])
                            ("other" variable nil (reparse-symbol function_parameters) [3862 3867]))                          )
                        (reparse-symbol indented_block_body) [3845 4004])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4020 4024])
                            ("other" variable nil (reparse-symbol function_parameters) [4026 4031]))                          )
                        (reparse-symbol indented_block_body) [4009 4168])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4184 4188])
                            ("other" variable nil (reparse-symbol function_parameters) [4190 4195]))                          )
                        (reparse-symbol indented_block_body) [4173 4440])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4456 4460])
                            ("other" variable nil (reparse-symbol function_parameters) [4462 4467]))                          )
                        (reparse-symbol indented_block_body) [4445 4605])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4621 4625])
                            ("other" variable nil (reparse-symbol function_parameters) [4627 4632]))                          )
                        (reparse-symbol indented_block_body) [4610 4670])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4711 4714])
                            ("it" variable nil (reparse-symbol function_parameters) [4716 4718]))                          )
                        (reparse-symbol indented_block_body) [4675 4947])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4964 4968])
                            ("other" variable nil (reparse-symbol function_parameters) [4970 4975]))                          )
                        (reparse-symbol indented_block_body) [4952 5134])
                    ("__rand__" variable nil (reparse-symbol indented_block_body) [5139 5157])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5178 5182])
                            ("other" variable nil (reparse-symbol function_parameters) [5184 5189]))                          )
                        (reparse-symbol indented_block_body) [5163 5359])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5375 5379])
                            ("other" variable nil (reparse-symbol function_parameters) [5381 5386]))                          )
                        (reparse-symbol indented_block_body) [5364 5563])
                    ("__ror__" variable nil (reparse-symbol indented_block_body) [5568 5584])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5602 5606])
                            ("other" variable nil (reparse-symbol function_parameters) [5608 5613]))                          )
                        (reparse-symbol indented_block_body) [5590 5905])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5923 5927])
                            ("other" variable nil (reparse-symbol function_parameters) [5929 5934]))                          )
                        (reparse-symbol indented_block_body) [5910 6226])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6243 6247])
                            ("other" variable nil (reparse-symbol function_parameters) [6249 6254]))                          )
                        (reparse-symbol indented_block_body) [6231 6476])
                    ("__rxor__" variable nil (reparse-symbol indented_block_body) [6481 6499])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [6576 6591])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6607 6611]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [6597 7600]))                  
                :type "class")
                nil [3172 7600])
            ("Set" code nil nil [7601 7624])
            ("MutableSet" type
               (:documentation "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8085 8089])
                            ("value" variable nil (reparse-symbol function_parameters) [8091 8096]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [8057 8163])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8200 8204])
                            ("value" variable nil (reparse-symbol function_parameters) [8206 8211]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [8168 8319])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8335 8339])
                            ("value" variable nil (reparse-symbol function_parameters) [8341 8346]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [8324 8509])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8522 8526]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [8514 8766])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8781 8785]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [8771 8963])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8980 8984])
                            ("it" variable nil (reparse-symbol function_parameters) [8986 8988]))                          )
                        (reparse-symbol indented_block_body) [8968 9064])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9082 9086])
                            ("it" variable nil (reparse-symbol function_parameters) [9088 9090]))                          )
                        (reparse-symbol indented_block_body) [9069 9179])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9197 9201])
                            ("it" variable nil (reparse-symbol function_parameters) [9203 9205]))                          )
                        (reparse-symbol indented_block_body) [9184 9536])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9554 9558])
                            ("it" variable nil (reparse-symbol function_parameters) [9560 9562]))                          )
                        (reparse-symbol indented_block_body) [9541 9712]))                  
                :type "class")
                nil [7627 9712])
            ("MutableSet" code nil nil [9713 9737])
            ("Mapping" type
               (:documentation "A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.

    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10054 10058])
                            ("key" variable nil (reparse-symbol function_parameters) [10060 10063]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10018 10089])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10102 10106])
                            ("key" variable nil (reparse-symbol function_parameters) [10108 10111])
                            ("default" variable nil (reparse-symbol function_parameters) [10113 10120]))                          )
                        (reparse-symbol indented_block_body) [10094 10293])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10315 10319])
                            ("key" variable nil (reparse-symbol function_parameters) [10321 10324]))                          )
                        (reparse-symbol indented_block_body) [10298 10450])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10468 10472]))                          )
                        (reparse-symbol indented_block_body) [10455 10558])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10578 10582]))                          )
                        (reparse-symbol indented_block_body) [10563 10699])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10718 10722]))                          )
                        (reparse-symbol indented_block_body) [10704 10857])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10871 10875]))                          )
                        (reparse-symbol indented_block_body) [10862 10943])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10958 10962]))                          )
                        (reparse-symbol indented_block_body) [10948 11082])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11098 11102]))                          )
                        (reparse-symbol indented_block_body) [11087 11191])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [11271 11286])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11303 11307])
                            ("other" variable nil (reparse-symbol function_parameters) [11309 11314]))                          )
                        (reparse-symbol indented_block_body) [11292 11451])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11467 11471])
                            ("other" variable nil (reparse-symbol function_parameters) [11473 11478]))                          )
                        (reparse-symbol indented_block_body) [11456 11516]))                  
                :type "class")
                nil [9759 11516])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11585 11608]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11561 11565])
                            ("mapping" variable nil (reparse-symbol function_parameters) [11567 11574]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11548 11609])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11626 11630]))                          )
                        (reparse-symbol indented_block_body) [11614 11667])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11685 11689]))                          )
                        (reparse-symbol indented_block_body) [11672 11761]))                  
                :type "class")
                nil [11517 11761])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11838 11842])
                            ("it" variable nil (reparse-symbol function_parameters) [11844 11846]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11802 11872])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11894 11898])
                            ("key" variable nil (reparse-symbol function_parameters) [11900 11903]))                          )
                        (reparse-symbol indented_block_body) [11877 11942])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11960 11964]))                          )
                        (reparse-symbol indented_block_body) [11947 12023]))                  
                :type "class")
                nil [11763 12023])
            ("KeysView" code nil nil [12024 12062])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12140 12144])
                            ("it" variable nil (reparse-symbol function_parameters) [12146 12148]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12104 12174])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12196 12200])
                            ("item" variable nil (reparse-symbol function_parameters) [12202 12206]))                          )
                        (reparse-symbol indented_block_body) [12179 12377])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12395 12399]))                          )
                        (reparse-symbol indented_block_body) [12382 12480]))                  
                :type "class")
                nil [12064 12480])
            ("ItemsView" code nil nil [12481 12521])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12576 12580])
                            ("value" variable nil (reparse-symbol function_parameters) [12582 12587]))                          )
                        (reparse-symbol indented_block_body) [12559 12717])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12735 12739]))                          )
                        (reparse-symbol indented_block_body) [12722 12813]))                  
                :type "class")
                nil [12523 12813])
            ("ValuesView" code nil nil [12814 12856])
            ("MutableMapping" type
               (:documentation "A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.

    "
                :superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13178 13182])
                            ("key" variable nil (reparse-symbol function_parameters) [13184 13187])
                            ("value" variable nil (reparse-symbol function_parameters) [13189 13194]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13142 13220])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13261 13265])
                            ("key" variable nil (reparse-symbol function_parameters) [13267 13270]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13225 13296])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [13301 13320])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13334 13338])
                            ("key" variable nil (reparse-symbol function_parameters) [13340 13343])
                            ("default" variable nil (reparse-symbol function_parameters) [13345 13352]))                          )
                        (reparse-symbol indented_block_body) [13326 13771])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13788 13792]))                          )
                        (reparse-symbol indented_block_body) [13776 14120])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14135 14139]))                          )
                        (reparse-symbol indented_block_body) [14125 14307])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [14323 14328])
                        ("kwds" variable nil (reparse-symbol function_parameters) [14330 14336]))                      ) (reparse-symbol indented_block_body) [14312 15478])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15498 15502])
                            ("key" variable nil (reparse-symbol function_parameters) [15504 15507])
                            ("default" variable nil (reparse-symbol function_parameters) [15509 15516]))                          )
                        (reparse-symbol indented_block_body) [15483 15721]))                  
                :type "class")
                nil [12858 15721])
            ("MutableMapping" code nil nil [15722 15751])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16008 16012])
                            ("index" variable nil (reparse-symbol function_parameters) [16014 16019]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15972 16047])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16065 16069]))                          )
                        (reparse-symbol indented_block_body) [16052 16244])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16266 16270])
                            ("value" variable nil (reparse-symbol function_parameters) [16272 16277]))                          )
                        (reparse-symbol indented_block_body) [16249 16379])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16401 16405]))                          )
                        (reparse-symbol indented_block_body) [16384 16479])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16494 16498])
                            ("value" variable nil (reparse-symbol function_parameters) [16500 16505]))                          )
                        (reparse-symbol indented_block_body) [16484 16761])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16776 16780])
                            ("value" variable nil (reparse-symbol function_parameters) [16782 16787]))                          )
                        (reparse-symbol indented_block_body) [16766 16917]))                  
                :type "class")
                nil [15774 16917])
            ("Sequence" code nil nil [16918 16942])
            ("Sequence" code nil nil [16943 16972])
            ("Sequence" code nil nil [16973 16998])
            ("Sequence" code nil nil [16999 17024])
            ("MutableSequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().

    "
                :superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17287 17291])
                            ("index" variable nil (reparse-symbol function_parameters) [17293 17298])
                            ("value" variable nil (reparse-symbol function_parameters) [17300 17305]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17251 17333])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17374 17378])
                            ("index" variable nil (reparse-symbol function_parameters) [17380 17385]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17338 17413])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17449 17453])
                            ("index" variable nil (reparse-symbol function_parameters) [17455 17460])
                            ("value" variable nil (reparse-symbol function_parameters) [17462 17467]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17418 17559])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17575 17579])
                            ("value" variable nil (reparse-symbol function_parameters) [17581 17586]))                          )
                        (reparse-symbol indented_block_body) [17564 17698])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17715 17719]))                          )
                        (reparse-symbol indented_block_body) [17703 17874])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17890 17894])
                            ("values" variable nil (reparse-symbol function_parameters) [17896 17902]))                          )
                        (reparse-symbol indented_block_body) [17879 18045])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18058 18062])
                            ("index" variable nil (reparse-symbol function_parameters) [18064 18069]))                          )
                        (reparse-symbol indented_block_body) [18050 18308])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18324 18328])
                            ("value" variable nil (reparse-symbol function_parameters) [18330 18335]))                          )
                        (reparse-symbol indented_block_body) [18313 18507])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18525 18529])
                            ("values" variable nil (reparse-symbol function_parameters) [18531 18537]))                          )
                        (reparse-symbol indented_block_body) [18512 18588]))                  
                :type "class")
                nil [17027 18588])
            ("MutableSequence" code nil nil [18589 18619]))          
      :file "_abcoll.py"
      :pointmax 18620
      :fsize 18619
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Keywords (from \"graminit.c\")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    ./python Lib/keyword.py
\"\"\"" code nil nil [24 281])
            ("__all__" variable nil nil [283 316])
            ("kwlist" variable nil nil [318 881])
            ("iskeyword" variable nil nil [883 925])
            ("main" function nil nil [927 1957])
            ("if" code nil nil [1958 1996]))          
      :file "keyword.py"
      :pointmax 1996
      :fsize 1995
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
\"\"\"" code nil nil [28 1297])
            ("__about__" variable nil nil [1381 6117])
            ("__all__" variable nil nil [6119 6238])
            ("itertools" include nil nil [6240 6299])
            ("operator" include nil nil [6300 6331])
            ("cmp_lt" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6344 6345])
                ("y" variable nil (reparse-symbol function_parameters) [6347 6348]))              ) nil [6333 6510])
            ("heappush" function
               (:documentation "Push item onto heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6524 6528])
                    ("item" variable nil (reparse-symbol function_parameters) [6530 6534]))                  )
                nil [6511 6658])
            ("heappop" function
               (:documentation "Pop the smallest item off the heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6671 6675]))                  )
                nil [6659 6987])
            ("heapreplace" function
               (:documentation "Pop and return the current smallest value, and add the new item.

    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed-size heap.  Note that the value
    returned may be larger than item!  That constrains reasonable uses of
    this routine unless written as part of a conditional replacement:

        if item > heap[0]:
            item = heapreplace(heap, item)
    "
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7004 7008])
                    ("item" variable nil (reparse-symbol function_parameters) [7010 7014]))                  )
                nil [6988 7601])
            ("heappushpop" function
               (:documentation "Fast version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7618 7622])
                    ("item" variable nil (reparse-symbol function_parameters) [7624 7628]))                  )
                nil [7602 7809])
            ("heapify" function
               (:documentation "Transform list into a heap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7822 7823]))                  )
                nil [7810 8338])
            ("_heappushpop_max" function
               (:documentation "Maxheap version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [8360 8364])
                    ("item" variable nil (reparse-symbol function_parameters) [8366 8370]))                  )
                nil [8339 8558])
            ("_heapify_max" function
               (:documentation "Transform list into a maxheap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [8576 8577]))                  )
                nil [8559 8727])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8741 8742])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8744 8752]))                  )
                nil [8728 9152])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [9167 9168])
                    ("iterable" variable nil (reparse-symbol function_parameters) [9170 9178]))                  )
                nil [9153 9563])
            ("_siftdown" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [9747 9751])
                ("startpos" variable nil (reparse-symbol function_parameters) [9753 9761])
                ("pos" variable nil (reparse-symbol function_parameters) [9763 9766]))              ) nil [9733 10597])
            ("_siftup" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12213 12217])
                ("pos" variable nil (reparse-symbol function_parameters) [12219 12222]))              ) nil [12201 12941])
            ("_siftdown_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12960 12964])
                ("startpos" variable nil (reparse-symbol function_parameters) [12966 12974])
                ("pos" variable nil (reparse-symbol function_parameters) [12976 12979]))              ) nil [12942 13386])
            ("_siftup_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [13403 13407])
                ("pos" variable nil (reparse-symbol function_parameters) [13409 13412]))              ) nil [13387 14165])
            ("try" code nil nil [14203 14262])
            ("merge" function (:arguments 
              ( ("iterables" variable nil (reparse-symbol function_parameters) [14273 14283]))              ) nil [14263 15563])
            ("_nsmallest" variable nil nil [15642 15664])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [15679 15680])
                    ("iterable" variable nil (reparse-symbol function_parameters) [15682 15690])
                    ("key" variable nil (reparse-symbol function_parameters) [15692 15695]))                  )
                nil [15665 16816])
            ("_nlargest" variable nil nil [16817 16837])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [16851 16852])
                    ("iterable" variable nil (reparse-symbol function_parameters) [16854 16862])
                    ("key" variable nil (reparse-symbol function_parameters) [16864 16867]))                  )
                nil [16838 18014])
            ("if" code nil nil [18015 18296]))          
      :file "heapq.py"
      :pointmax 18296
      :fsize 18295
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax '((RETURN 6453 . 6459) (IF 6468 . 6470) (ELSE 6492 . 6496)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 942])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [959 967]))                  )
                nil [944 1635])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1653 1661])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1663 1677]))                  )
                nil [1637 4028]))          
      :file "linecache.py"
      :pointmax 4028
      :fsize 4027
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("types" include nil nil [161 173])
            ("_weakrefset" include nil nil [175 206])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [238 253])
            ("_InstanceType" variable nil nil [253 279])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [301 308]))                  )
                nil [282 876])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1742 1769]))                  
                :type "class")
                nil [878 1770])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2614 2643])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2661 2665])
                        ("name" variable nil (reparse-symbol function_parameters) [2667 2671])
                        ("bases" variable nil (reparse-symbol function_parameters) [2673 2678])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2680 2689]))                      ) (reparse-symbol indented_block_body) [2649 3526])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3544 3547])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3549 3557]))                          )
                        (reparse-symbol indented_block_body) [3531 4266])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4290 4293])
                            ("file" variable nil (reparse-symbol function_parameters) [4295 4299]))                          )
                        (reparse-symbol indented_block_body) [4271 4698])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4725 4728])
                            ("instance" variable nil (reparse-symbol function_parameters) [4730 4738]))                          )
                        (reparse-symbol indented_block_body) [4703 5559])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5586 5589])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5591 5599]))                          )
                        (reparse-symbol indented_block_body) [5564 7146]))                  
                :type "class")
                nil [1772 7146]))          
      :file "abc.py"
      :pointmax 7146
      :fsize 7145
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("try" code nil nil [5391 5454])
            ("__all__" variable nil nil [5472 5700])
            ("__version__" variable nil nil [5702 5723])
            ("I" variable nil nil [5733 5781])
            ("L" variable nil nil [5796 5836])
            ("U" variable nil nil [5867 5909])
            ("M" variable nil nil [5934 5980])
            ("S" variable nil nil [6013 6053])
            ("X" variable nil nil [6079 6121])
            ("T" variable nil nil [6209 6253])
            ("DEBUG" variable nil nil [6277 6311])
            ("error" variable nil nil [6362 6387])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6490 6497])
                    ("string" variable nil (reparse-symbol function_parameters) [6499 6505])
                    ("flags" variable nil (reparse-symbol function_parameters) [6507 6512]))                  )
                nil [6480 6691])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6703 6710])
                    ("string" variable nil (reparse-symbol function_parameters) [6712 6718])
                    ("flags" variable nil (reparse-symbol function_parameters) [6720 6725]))                  )
                nil [6692 6908])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6917 6924])
                    ("repl" variable nil (reparse-symbol function_parameters) [6926 6930])
                    ("string" variable nil (reparse-symbol function_parameters) [6932 6938])
                    ("count" variable nil (reparse-symbol function_parameters) [6940 6945])
                    ("flags" variable nil (reparse-symbol function_parameters) [6949 6954]))                  )
                nil [6909 7377])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7387 7394])
                    ("repl" variable nil (reparse-symbol function_parameters) [7396 7400])
                    ("string" variable nil (reparse-symbol function_parameters) [7402 7408])
                    ("count" variable nil (reparse-symbol function_parameters) [7410 7415])
                    ("flags" variable nil (reparse-symbol function_parameters) [7419 7424]))                  )
                nil [7378 7977])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7988 7995])
                    ("string" variable nil (reparse-symbol function_parameters) [7997 8003])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [8005 8013])
                    ("flags" variable nil (reparse-symbol function_parameters) [8017 8022]))                  )
                nil [7978 8214])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8227 8234])
                    ("string" variable nil (reparse-symbol function_parameters) [8236 8242])
                    ("flags" variable nil (reparse-symbol function_parameters) [8244 8249]))                  )
                nil [8215 8581])
            ("if" code nil nil [8582 8941])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8954 8961])
                ("flags" variable nil (reparse-symbol function_parameters) [8963 8968]))              ) nil [8942 9081])
            ("purge" function nil nil [9082 9179])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9193 9200])
                ("flags" variable nil (reparse-symbol function_parameters) [9202 9207]))              ) nil [9180 9311])
            ("_alphanum" variable nil nil [9312 9404])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9417 9424]))              ) nil [9406 13424]))          
      :file "re.py"
      :pointmax 13424
      :fsize 13423
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [543 582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [483 487])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [489 502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [470 583])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [602 606]))                          )
                        (reparse-symbol indented_block_body) [588 723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [741 745])
                            ("e" variable nil (reparse-symbol function_parameters) [747 748])
                            ("t" variable nil (reparse-symbol function_parameters) [750 751])
                            ("b" variable nil (reparse-symbol function_parameters) [753 754]))                          )
                        (reparse-symbol indented_block_body) [728 931]))                  
                :type "class")
                nil [195 931])
            ("WeakSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [999 1016])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1037 1041])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1043 1050]))                              ) (reparse-symbol indented_block_body) [1025 1283])
                            ("self" variable nil (reparse-symbol indented_block_body) [1291 1313])
                            ("self" variable nil (reparse-symbol indented_block_body) [1361 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1397 1420])
                            ("if" code nil (reparse-symbol indented_block_body) [1429 1480]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977])
                            ("data" variable nil (reparse-symbol function_parameters) [979 983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [960 1480])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510]))                          )
                        (reparse-symbol indented_block_body) [1485 1630])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1648 1652]))                          )
                        (reparse-symbol indented_block_body) [1635 1965])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1982 1986]))                          )
                        (reparse-symbol indented_block_body) [1970 2049])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2071 2075])
                            ("item" variable nil (reparse-symbol function_parameters) [2077 2081]))                          )
                        (reparse-symbol indented_block_body) [2054 2206])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2226 2230]))                          )
                        (reparse-symbol indented_block_body) [2211 2329])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2334 2349])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2363 2367])
                            ("item" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2355 2494])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2509 2513]))                          )
                        (reparse-symbol indented_block_body) [2499 2613])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2627 2631]))                          )
                        (reparse-symbol indented_block_body) [2618 2670])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2683 2687]))                          )
                        (reparse-symbol indented_block_body) [2675 3016])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3032 3036])
                            ("item" variable nil (reparse-symbol function_parameters) [3038 3042]))                          )
                        (reparse-symbol indented_block_body) [3021 3152])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3169 3173])
                            ("item" variable nil (reparse-symbol function_parameters) [3175 3179]))                          )
                        (reparse-symbol indented_block_body) [3157 3290])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3306 3310])
                            ("other" variable nil (reparse-symbol function_parameters) [3312 3317]))                          )
                        (reparse-symbol indented_block_body) [3295 3451])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3468 3472])
                            ("other" variable nil (reparse-symbol function_parameters) [3474 3479]))                          )
                        (reparse-symbol indented_block_body) [3456 3529])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3549 3553])
                            ("other" variable nil (reparse-symbol function_parameters) [3555 3560]))                          )
                        (reparse-symbol indented_block_body) [3534 3654])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3658 3678])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3706 3710])
                            ("other" variable nil (reparse-symbol function_parameters) [3712 3717]))                          )
                        (reparse-symbol indented_block_body) [3684 3749])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3766 3770])
                            ("other" variable nil (reparse-symbol function_parameters) [3772 3777]))                          )
                        (reparse-symbol indented_block_body) [3753 4010])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4032 4036])
                            ("other" variable nil (reparse-symbol function_parameters) [4038 4043]))                          )
                        (reparse-symbol indented_block_body) [4015 4116])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4120 4142])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4172 4176])
                            ("other" variable nil (reparse-symbol function_parameters) [4178 4183]))                          )
                        (reparse-symbol indented_block_body) [4148 4215])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4232 4236])
                            ("other" variable nil (reparse-symbol function_parameters) [4238 4243]))                          )
                        (reparse-symbol indented_block_body) [4219 4404])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4422 4426])
                            ("other" variable nil (reparse-symbol function_parameters) [4428 4433]))                          )
                        (reparse-symbol indented_block_body) [4409 4499])
                    ("__le__" variable nil (reparse-symbol indented_block_body) [4503 4520])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4537 4541])
                            ("other" variable nil (reparse-symbol function_parameters) [4543 4548]))                          )
                        (reparse-symbol indented_block_body) [4526 4611])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4631 4635])
                            ("other" variable nil (reparse-symbol function_parameters) [4637 4642]))                          )
                        (reparse-symbol indented_block_body) [4616 4710])
                    ("__ge__" variable nil (reparse-symbol indented_block_body) [4714 4733])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4750 4754])
                            ("other" variable nil (reparse-symbol function_parameters) [4756 4761]))                          )
                        (reparse-symbol indented_block_body) [4739 4824])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4840 4844])
                            ("other" variable nil (reparse-symbol function_parameters) [4846 4851]))                          )
                        (reparse-symbol indented_block_body) [4829 4999])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5015 5019])
                            ("other" variable nil (reparse-symbol function_parameters) [5021 5026]))                          )
                        (reparse-symbol indented_block_body) [5004 5168])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5198 5202])
                            ("other" variable nil (reparse-symbol function_parameters) [5204 5209]))                          )
                        (reparse-symbol indented_block_body) [5173 5313])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5317 5347])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5385 5389])
                            ("other" variable nil (reparse-symbol function_parameters) [5391 5396]))                          )
                        (reparse-symbol indented_block_body) [5353 5428])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5445 5449])
                            ("other" variable nil (reparse-symbol function_parameters) [5451 5456]))                          )
                        (reparse-symbol indented_block_body) [5432 5713])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5728 5732])
                            ("other" variable nil (reparse-symbol function_parameters) [5734 5739]))                          )
                        (reparse-symbol indented_block_body) [5718 5809])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [5813 5827])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5848 5852])
                            ("other" variable nil (reparse-symbol function_parameters) [5854 5859]))                          )
                        (reparse-symbol indented_block_body) [5833 5912]))                  
                :type "class")
                nil [933 5912]))          
      :file "_weakrefset.py"
      :pointmax 5912
      :fsize 5911
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [249 286])
            ("sys" include nil nil [288 304])
            ("_sre" include nil nil [288 304])
            ("sre_parse" include nil nil [305 321])
            ("sre_constants" include nil nil [322 349])
            ("assert" code nil nil [351 400])
            ("if" code nil nil [402 477])
            ("_LITERAL_CODES" variable nil nil [478 522])
            ("_REPEATING_CODES" variable nil nil [523 579])
            ("_SUCCESS_CODES" variable nil nil [580 620])
            ("_ASSERT_CODES" variable nil nil [621 662])
            ("_equivalences" variable nil nil [726 1816])
            ("_ignorecase_fixes" variable nil nil [1894 2003])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [2018 2022])
                ("pattern" variable nil (reparse-symbol function_parameters) [2024 2031])
                ("flags" variable nil (reparse-symbol function_parameters) [2033 2038]))              ) nil [2005 8018])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [8040 8047])
                ("flags" variable nil (reparse-symbol function_parameters) [8049 8054])
                ("code" variable nil (reparse-symbol function_parameters) [8056 8060])
                ("fixup" variable nil (reparse-symbol function_parameters) [8062 8067])
                ("fixes" variable nil (reparse-symbol function_parameters) [8074 8079]))              ) nil [8019 8929])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [8952 8959])
                ("fixup" variable nil (reparse-symbol function_parameters) [8961 8966])
                ("fixes" variable nil (reparse-symbol function_parameters) [8968 8973])
                ("isunicode" variable nil (reparse-symbol function_parameters) [8975 8984]))              ) nil [8930 13942])
            ("_fixup_range" function (:arguments 
              ( ("lo" variable nil (reparse-symbol function_parameters) [13960 13962])
                ("hi" variable nil (reparse-symbol function_parameters) [13964 13966])
                ("ranges" variable nil (reparse-symbol function_parameters) [13968 13974])
                ("fixup" variable nil (reparse-symbol function_parameters) [13976 13981]))              ) nil [13943 14467])
            ("_CODEBITS" code nil nil [14468 14497])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [14545 14549])
                ("_CODEBITS" variable nil (reparse-symbol function_parameters) [14551 14560])
                ("_int" variable nil (reparse-symbol function_parameters) [14572 14576]))              ) nil [14530 14724])
            ("_bytes_to_codes" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [14745 14746]))              ) nil [14725 15021])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [15034 15036]))              ) nil [15022 15165])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [15184 15188])
                ("pattern" variable nil (reparse-symbol function_parameters) [15190 15197])
                ("flags" variable nil (reparse-symbol function_parameters) [15199 15204]))              ) nil [15166 18570])
            ("try" code nil nil [18571 18692])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [18706 18709]))              ) nil [18693 18806])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [18817 18818])
                ("flags" variable nil (reparse-symbol function_parameters) [18820 18825]))              ) nil [18807 19052])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [19065 19066])
                ("flags" variable nil (reparse-symbol function_parameters) [19068 19073]))              ) nil [19053 19797]))          
      :file "sre_compile.py"
      :pointmax 19797
      :fsize 19823
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("SPECIAL_CHARS" variable nil nil [386 417])
            ("REPEAT_CHARS" variable nil nil [418 439])
            ("DIGITS" variable nil nil [441 467])
            ("OCTDIGITS" variable nil nil [469 496])
            ("HEXDIGITS" variable nil nil [497 538])
            ("ASCIILETTERS" variable nil nil [539 613])
            ("WHITESPACE" variable nil nil [615 646])
            ("ESCAPES" variable nil nil [648 924])
            ("CATEGORIES" variable nil nil [926 1402])
            ("FLAGS" variable nil nil [1404 1646])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1758 1772])
                            ("self" variable nil (reparse-symbol indented_block_body) [1781 1795])
                            ("self" variable nil (reparse-symbol indented_block_body) [1804 1819])
                            ("self" variable nil (reparse-symbol indented_block_body) [1828 1847])
                            ("self" variable nil (reparse-symbol indented_block_body) [1856 1875]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1743 1747]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1730 1876])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1895 1899])
                            ("name" variable nil (reparse-symbol function_parameters) [1901 1905]))                          )
                        (reparse-symbol indented_block_body) [1881 2318])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2337 2341])
                            ("gid" variable nil (reparse-symbol function_parameters) [2343 2346]))                          )
                        (reparse-symbol indented_block_body) [2322 2379])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2398 2402])
                            ("gid" variable nil (reparse-symbol function_parameters) [2404 2407]))                          )
                        (reparse-symbol indented_block_body) [2383 2468]))                  
                :type "class")
                nil [1648 2468])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2580 2602])
                            ("if" code nil (reparse-symbol indented_block_body) [2611 2650])
                            ("self" variable nil (reparse-symbol indented_block_body) [2658 2674])
                            ("self" variable nil (reparse-symbol indented_block_body) [2683 2700]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2545 2549])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2551 2558])
                            ("data" variable nil (reparse-symbol function_parameters) [2560 2564]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2532 2701])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2714 2718])
                            ("level" variable nil (reparse-symbol function_parameters) [2720 2725]))                          )
                        (reparse-symbol indented_block_body) [2705 3954])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3971 3975]))                          )
                        (reparse-symbol indented_block_body) [3958 4009])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4025 4029]))                          )
                        (reparse-symbol indented_block_body) [4013 4062])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4082 4086])
                            ("index" variable nil (reparse-symbol function_parameters) [4088 4093]))                          )
                        (reparse-symbol indented_block_body) [4066 4125])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4145 4149])
                            ("index" variable nil (reparse-symbol function_parameters) [4151 4156]))                          )
                        (reparse-symbol indented_block_body) [4129 4290])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4310 4314])
                            ("index" variable nil (reparse-symbol function_parameters) [4316 4321])
                            ("code" variable nil (reparse-symbol function_parameters) [4323 4327]))                          )
                        (reparse-symbol indented_block_body) [4294 4362])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4377 4381])
                            ("index" variable nil (reparse-symbol function_parameters) [4383 4388])
                            ("code" variable nil (reparse-symbol function_parameters) [4390 4394]))                          )
                        (reparse-symbol indented_block_body) [4366 4435])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4450 4454])
                            ("code" variable nil (reparse-symbol function_parameters) [4456 4460]))                          )
                        (reparse-symbol indented_block_body) [4439 4494])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4511 4515]))                          )
                        (reparse-symbol indented_block_body) [4498 5719]))                  
                :type "class")
                nil [2469 5719])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5777 5797])
                            ("self" variable nil (reparse-symbol indented_block_body) [5806 5820])
                            ("self" code nil (reparse-symbol indented_block_body) [5829 5842]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5754 5758])
                            ("string" variable nil (reparse-symbol function_parameters) [5760 5766]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5741 5843])
                    ("raise" code nil (reparse-symbol indented_block_body) [8625 8671]))                  
                :type "class")
                nil [5720 8672])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [8685 8691])
                ("escape" variable nil (reparse-symbol function_parameters) [8693 8699])
                ("state" variable nil (reparse-symbol function_parameters) [8701 8706])
                ("nested" variable nil (reparse-symbol function_parameters) [8708 8714]))              ) nil [8673 11158])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11174 11180])
                ("state" variable nil (reparse-symbol function_parameters) [11182 11187])
                ("nested" variable nil (reparse-symbol function_parameters) [11189 11195]))              ) nil [11159 12794])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [12815 12821])
                ("state" variable nil (reparse-symbol function_parameters) [12823 12828])
                ("condgroup" variable nil (reparse-symbol function_parameters) [12830 12839])
                ("nested" variable nil (reparse-symbol function_parameters) [12841 12847]))              ) nil [12795 13345])
            ("_PATTERNENDERS" variable nil nil [13346 13372])
            ("_ASSERTCHARS" variable nil nil [13373 13398])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [13399 13433])
            ("_REPEATCODES" variable nil nil [13434 13478])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [13491 13497])
                ("state" variable nil (reparse-symbol function_parameters) [13499 13504])
                ("nested" variable nil (reparse-symbol function_parameters) [13506 13512]))              ) nil [13480 30295])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [30316 30324])
                ("match" variable nil (reparse-symbol function_parameters) [30326 30331]))              ) nil [30296 30701]))          
      :file "sre_parse.py"
      :pointmax 30701
      :fsize 30700
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax '((ASSIGN 30008 . 30009) (INDENT_BLOCK 8608 . 8621) (NEWLINE 8607 . 8608) (COLON 8606 . 8607)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("try" code nil nil [399 510])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [617 621]))                  
                :type "class")
                nil [589 622])
            ("FAILURE" variable nil nil [636 655])
            ("SUCCESS" variable nil nil [656 675])
            ("ANY" variable nil nil [677 688])
            ("ANY_ALL" variable nil nil [689 708])
            ("ASSERT" variable nil nil [709 726])
            ("ASSERT_NOT" variable nil nil [727 752])
            ("AT" variable nil nil [753 762])
            ("BIGCHARSET" variable nil nil [763 788])
            ("BRANCH" variable nil nil [789 806])
            ("CALL" variable nil nil [807 820])
            ("CATEGORY" variable nil nil [821 842])
            ("CHARSET" variable nil nil [843 862])
            ("GROUPREF" variable nil nil [863 884])
            ("GROUPREF_IGNORE" variable nil nil [885 920])
            ("GROUPREF_EXISTS" variable nil nil [921 956])
            ("IN" variable nil nil [957 966])
            ("IN_IGNORE" variable nil nil [967 990])
            ("INFO" variable nil nil [991 1004])
            ("JUMP" variable nil nil [1005 1018])
            ("LITERAL" variable nil nil [1019 1038])
            ("LITERAL_IGNORE" variable nil nil [1039 1072])
            ("MARK" variable nil nil [1073 1086])
            ("MAX_REPEAT" variable nil nil [1087 1112])
            ("MAX_UNTIL" variable nil nil [1113 1136])
            ("MIN_REPEAT" variable nil nil [1137 1162])
            ("MIN_UNTIL" variable nil nil [1163 1186])
            ("NEGATE" variable nil nil [1187 1204])
            ("NOT_LITERAL" variable nil nil [1205 1232])
            ("NOT_LITERAL_IGNORE" variable nil nil [1233 1274])
            ("RANGE" variable nil nil [1275 1290])
            ("REPEAT" variable nil nil [1291 1308])
            ("REPEAT_ONE" variable nil nil [1309 1334])
            ("SUBPATTERN" variable nil nil [1335 1360])
            ("MIN_REPEAT_ONE" variable nil nil [1361 1394])
            ("AT_BEGINNING" variable nil nil [1408 1437])
            ("AT_BEGINNING_LINE" variable nil nil [1438 1477])
            ("AT_BEGINNING_STRING" variable nil nil [1478 1521])
            ("AT_BOUNDARY" variable nil nil [1522 1549])
            ("AT_NON_BOUNDARY" variable nil nil [1550 1585])
            ("AT_END" variable nil nil [1586 1603])
            ("AT_END_LINE" variable nil nil [1604 1631])
            ("AT_END_STRING" variable nil nil [1632 1663])
            ("AT_LOC_BOUNDARY" variable nil nil [1664 1699])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1700 1743])
            ("AT_UNI_BOUNDARY" variable nil nil [1744 1779])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1780 1823])
            ("CATEGORY_DIGIT" variable nil nil [1838 1871])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1872 1913])
            ("CATEGORY_SPACE" variable nil nil [1914 1947])
            ("CATEGORY_NOT_SPACE" variable nil nil [1948 1989])
            ("CATEGORY_WORD" variable nil nil [1990 2021])
            ("CATEGORY_NOT_WORD" variable nil nil [2022 2061])
            ("CATEGORY_LINEBREAK" variable nil nil [2062 2103])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2104 2153])
            ("CATEGORY_LOC_WORD" variable nil nil [2154 2193])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2194 2241])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2242 2283])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2284 2333])
            ("CATEGORY_UNI_SPACE" variable nil nil [2334 2375])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2376 2425])
            ("CATEGORY_UNI_WORD" variable nil nil [2426 2465])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2466 2513])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2514 2563])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2564 2621])
            ("OPCODES" variable nil nil [2623 3120])
            ("ATCODES" variable nil nil [3122 3346])
            ("CHCODES" variable nil nil [3348 3762])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3777 3781]))              ) nil [3764 3878])
            ("OPCODES" variable nil nil [3879 3906])
            ("ATCODES" variable nil nil [3907 3934])
            ("CHCODES" variable nil nil [3935 3962])
            ("OP_IGNORE" variable nil nil [4012 4142])
            ("AT_MULTILINE" variable nil nil [4144 4223])
            ("AT_LOCALE" variable nil nil [4225 4315])
            ("AT_UNICODE" variable nil nil [4317 4408])
            ("CH_LOCALE" variable nil nil [4410 4764])
            ("CH_UNICODE" variable nil nil [4766 5145])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5155 5176])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5216 5239])
            ("SRE_FLAG_LOCALE" variable nil nil [5259 5278])
            ("SRE_FLAG_MULTILINE" variable nil nil [5302 5324])
            ("SRE_FLAG_DOTALL" variable nil nil [5360 5380])
            ("SRE_FLAG_UNICODE" variable nil nil [5415 5436])
            ("SRE_FLAG_VERBOSE" variable nil nil [5458 5479])
            ("SRE_FLAG_DEBUG" variable nil nil [5513 5533])
            ("SRE_INFO_PREFIX" variable nil nil [5574 5593])
            ("SRE_INFO_LITERAL" variable nil nil [5607 5627])
            ("SRE_INFO_CHARSET" variable nil nil [5674 5694])
            ("if" code nil nil [5743 7198]))          
      :file "sre_constants.py"
      :pointmax 7198
      :fsize 7197
      :lastmodtime '(22982 56022 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
