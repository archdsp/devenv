;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utility to compare (Numpy) version strings.

The NumpyVersion class allows properly comparing numpy version strings.
The LooseVersion and StrictVersion classes that distutils provides don't
work; they don't recognize anything like alpha/beta/rc/dev versions.

\"\"\"" code nil nil [1 267])
            ("re" include nil nil [269 278])
            ("scipy._lib.six" include nil nil [280 319])
            ("__all__" variable nil nil [322 348])
            ("NumpyVersion" type
               (:documentation "Parse and compare numpy version strings.

    Numpy has the following versioning scheme (numbers given are examples; they
    can be >9) in principle):

    - Released version: '1.8.0', '1.8.1', etc.
    - Alpha: '1.8.0a1', '1.8.0a2', etc.
    - Beta: '1.8.0b1', '1.8.0b2', etc.
    - Release candidates: '1.8.0rc1', '1.8.0rc2', etc.
    - Development versions: '1.8.0.dev-f1234afa' (git commit hash appended)
    - Development versions after a1: '1.8.0a1.dev-f1234afa',
                                     '1.8.0b2.dev-f1234afa',
                                     '1.8.1rc1.dev-f1234afa', etc.
    - Development versions (no git hash available): '1.8.0.dev-Unknown'

    Comparing needs to be done against a valid version string or other
    `NumpyVersion` instance.

    Parameters
    ----------
    vstring : str
        Numpy version string (``np.__version__``).

    Notes
    -----
    All dev versions of the same (pre-)release compare equal.

    Examples
    --------
    >>> from scipy._lib._version import NumpyVersion
    >>> if NumpyVersion(np.__version__) < '1.7.0':
    ...     print('skip')
    skip

    >>> NumpyVersion('1.7')  # raises ValueError, add \".0\"

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1611 1633])
                            ("ver_main" variable nil (reparse-symbol indented_block_body) [1642 1689])
                            ("if" code nil (reparse-symbol indented_block_body) [1698 1780])
                            ("self" variable nil (reparse-symbol indented_block_body) [1789 1820])
                            ("self, self, self" code nil (reparse-symbol indented_block_body) [1829 1920])
                            ("if" code nil (reparse-symbol indented_block_body) [1929 2407])
                            ("self" variable nil (reparse-symbol indented_block_body) [2416 2470]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1587 1591])
                            ("vstring" variable nil (reparse-symbol function_parameters) [1593 1600]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1574 2471])
                    ("_compare_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2497 2501])
                            ("other" variable nil (reparse-symbol function_parameters) [2503 2508]))                          
                        :documentation "Compare major.minor.bugfix")
                        (reparse-symbol indented_block_body) [2476 3084])
                    ("_compare_pre_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3114 3118])
                            ("other" variable nil (reparse-symbol function_parameters) [3120 3125]))                          
                        :documentation "Compare alpha/beta/rc/final.")
                        (reparse-symbol indented_block_body) [3089 3511])
                    ("_compare" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3529 3533])
                            ("other" variable nil (reparse-symbol function_parameters) [3535 3540]))                          )
                        (reparse-symbol indented_block_body) [3516 4296])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4312 4316])
                            ("other" variable nil (reparse-symbol function_parameters) [4318 4323]))                          )
                        (reparse-symbol indented_block_body) [4301 4366])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4382 4386])
                            ("other" variable nil (reparse-symbol function_parameters) [4388 4393]))                          )
                        (reparse-symbol indented_block_body) [4371 4437])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4453 4457])
                            ("other" variable nil (reparse-symbol function_parameters) [4459 4464]))                          )
                        (reparse-symbol indented_block_body) [4442 4508])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4524 4528])
                            ("other" variable nil (reparse-symbol function_parameters) [4530 4535]))                          )
                        (reparse-symbol indented_block_body) [4513 4579])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4595 4599])
                            ("other" variable nil (reparse-symbol function_parameters) [4601 4606]))                          )
                        (reparse-symbol indented_block_body) [4584 4649])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4665 4669])
                            ("other" variable nil (reparse-symbol function_parameters) [4671 4676]))                          )
                        (reparse-symbol indented_block_body) [4654 4720])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4738 4742]))                          )
                        (reparse-symbol indented_block_body) [4725 4794]))                  
                :type "class")
                nil [351 4794]))          
      :file "_version.py"
      :pointmax 4794
      :fsize 4793
      :lastmodtime '(23206 34015 941685 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utilities for writing code that runs on Python 2 and 3\"\"\"" code nil nil [1 61])
            ("operator" include nil nil [1163 1178])
            ("sys" include nil nil [1179 1189])
            ("types" include nil nil [1190 1202])
            ("__author__" variable nil nil [1204 1258])
            ("__version__" variable nil nil [1259 1280])
            ("PY3" code nil nil [1321 1351])
            ("if" code nil nil [1353 2163])
            ("_add_doc" function
               (:documentation "Add documentation to a function."
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [2178 2182])
                    ("doc" variable nil (reparse-symbol function_parameters) [2184 2187]))                  )
                nil [2165 2256])
            ("_import_module" function
               (:documentation "Import module, returning the module after the last dot."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [2277 2281]))                  )
                nil [2258 2400])
            ("if" code nil nil [2469 2765])
            ("if" code nil nil [2767 3187])
            ("try" code nil nil [3189 3295])
            ("next" variable nil nil [3295 3318])
            ("if" code nil nil [3321 3718])
            ("_add_doc" code nil nil [3718 3816])
            ("get_method_function" variable nil nil [3819 3872])
            ("get_method_self" variable nil nil [3873 3922])
            ("get_function_code" variable nil nil [3923 3974])
            ("get_function_defaults" variable nil nil [3975 4034])
            ("iterkeys" function
               (:documentation "Return an iterator over the keys of a dictionary."
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [4050 4051]))                  )
                nil [4037 4155])
            ("itervalues" function
               (:documentation "Return an iterator over the values of a dictionary."
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [4172 4173]))                  )
                nil [4157 4281])
            ("iteritems" function
               (:documentation "Return an iterator over the (key, value) pairs of a dictionary."
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [4297 4298]))                  )
                nil [4283 4417])
            ("if" code nil nil [4419 4987])
            ("_add_doc" code nil nil [4987 5018])
            ("_add_doc" code nil nil [5019 5050])
            ("if" code nil nil [5053 7242])
            ("_add_doc" code nil nil [7243 7289])
            ("with_metaclass" function
               (:documentation "Create a base class with a metaclass."
                :arguments 
                  ( ("meta" variable nil (reparse-symbol function_parameters) [7311 7315])
                    ("base" variable nil (reparse-symbol function_parameters) [7317 7321]))                  )
                nil [7292 7419]))          
      :file "six.py"
      :pointmax 7419
      :fsize 7418
      :lastmodtime '(23206 34015 941685 0)
      :unmatched-syntax nil))
  :file "!home!dsparch!.local!lib!python2.7!site-packages!scipy!_lib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
